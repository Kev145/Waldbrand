pip install matplotlib geopandas
pip install joblib

import numpy as np
import matplotlib.pyplot as plt
import geopandas as gpd
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import joblib
import shutil

zeit = 2
g = 0
for time in range(zeit):
    '''
    world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))
    germany = world[world.name == 'Germany']
    '''
    #NRW-Daten
    nrw_data = gpd.read_file('NRW.json')

    # Erstelle eine leere Karte
    fig, ax = plt.subplots(figsize=(10, 8))
    ax.set_aspect('equal')

    # Zeichne Deutschland
    nrw_data.plot(ax=ax, color='lightblue', edgecolor='black')

    # Füge Punkte hinzu
    points = {
        'Cologne': (6.9603, 50.9375),
        'Münster': (7.6261, 51.9607),
    }

    for city, coords in points.items():
        ax.plot(coords[0], coords[1], 'rv', markersize=3)
        ax.text(coords[0] - 0.5, coords[1], city, fontsize=10, color='black')

    # Wetterstandorte markieren
    # Pfad zur heruntergeladenen Excel-Datei
    excel_path = 'Klimastationen.xlsx'

    # Lese die Excel-Datei ein
    data = pd.read_excel(excel_path)

    #wie viele zeiteln
    b = len(data)
    wetterstation = {}
    wetterneu ={}
    # erstelle diconary mit {Ort : (Breite,Länge)}
    for i in range(b):
        wetterneu ={data.iloc[i, 2] : (data.iloc[i, 1], data.iloc[i, 0])}
        wetterstation.update(wetterneu)
    # markiere alle Standorte
    for city, coords in wetterstation.items():
        ax.plot(coords[0], coords[1], 'go', markersize=2)
        #ax.text(coords[0] - 0.5, coords[1], city, fontsize=10, color='black')



    '''# Feuchtigkeitswert markieren #rando werte!!!
    # Pfad zur heruntergeladenen Excel-Datei
    excel_path = 'Klimastationenneu.xlsx'

    # Lese die Excel-Datei ein
    data = pd.read_excel(excel_path)

    #wie viele zeiteln
    c = len(data)
    grenzwert = 7
    feuchtigkeit={}
    feuchtigekitneu={}
    for i in range(c):
        wert = data.iloc[i, 3]
        if wert >= grenzwert:
            feuchtigkeitneu ={data.iloc[i, 2] : (data.iloc[i, 1], data.iloc[i, 0])}
            feuchtigkeit.update(feuchtigkeitneu)
        else:
            continue
            #ax.plot(coords[0], coords[1], 'go', markersize=5)


    # markiere alle Standorte
    for city, coords in feuchtigkeit.items():
        ax.plot(coords[0], coords[1], 'yo', markersize=2)
        #ax.text(coords[0] - 0.5, coords[1], city, fontsize=10, color='black')
    '''    

    #Grenzwert
    # Pfad zur heruntergeladenen Excel-Datei
    excel_brand = 'Waldbrand1.xlsx'
    excel_temp = 'Temperatur.xlsx'
    excel_feucht = 'feucht.xlsx'

    # Lese die Excel-Datei ein
    brand= pd.read_excel(excel_brand)
    temp = pd.read_excel(excel_temp)
    feucht = pd.read_excel(excel_feucht)
    '''

    b = len(brand)
    c = len(temp)
    columns = ["stadt", "temperatur", "feucht", "klasse"]
    empty_df = pd.DataFrame(columns=columns)
    df = pd.DataFrame(empty_df)

    for i in range(b):
        ort = brand.iloc[i,0]
        for j in range(c):
            ort_temp = temp.iloc[j,0]
            if ort_temp == ort:
                new_row = {"stadt": brand.iloc[i,0], "temperatur": brand.iloc[i,6], "feucht": feucht.iloc[j, 1], "klasse": brand.iloc[i,1]}
                df = df.append(new_row, ignore_index=True)
            else:
                continue
    '''
    df = pd.read_excel(excel_brand)

    df.to_csv('data.csv', index=False)
    data = pd.read_csv('data.csv')


    X = data.drop(columns = ['Stationsname', 'Samstag', 'Sonntag', 'Montag', 'Dienstag', 'Mittwoch']) #schmeißt ein bestimmte zeile reaus
    #y = data.drop(columns = ['Stationsname', 'Sonntag', 'Montag', 'Dienstag', 'Mittwoch']) #schmeißt ein bestimmte zeile reaus
    y = data['Samstag']# frame mit nur den erinen zeile

    model = DecisionTreeClassifier()
    model.fit(X, y)

    #model = joblib.load('vorhersage.joblib')

    vorhersage = {'Münster': (7.6261, 51.9607, 27, 3, 400, 0.1), 
                 'Cologne': (6.9603, 50.9375, 400, 0.1, 27, 3),}

    
    for city, coords in vorhersage.items():
        predictions = model.predict([[coords[2+g], coords[3+g]]])
        if predictions == 2:
            ax.plot(coords[0], coords[1], 'yo', markersize=15)
            ax.text(coords[0] - 0.5, coords[1], city, fontsize=10, color='black')
        if predictions == 1:
            ax.plot(coords[0], coords[1], 'go', markersize=15)
            ax.text(coords[0] - 0.5, coords[1], city, fontsize=10, color='black')

    g =+2
    
    # Lade NRW_gemeinde-Daten
    gemeinde_data = gpd.read_file('NRW_gemeinden.geojson')

    # Erstelle eine Karte von Bundesländern
    fig, ax = plt.subplots(figsize=(10, 8))

    for bundesland in gemeinde_data['GEN'].unique():
        alle = gemeinde_data[gemeinde_data['GEN'] == 'bundesland']
        gemeinde_data.plot(ax=ax, color='lightblue', edgecolor='black')
      # zu viele !!!


       #speichere karte als jpeg bilder in ordenr
    # Speichere den Plot als JPEG-Datei
    output_path = 'diagramm' + str(time) + '.jpeg' # Passe den Pfad an
    plt.savefig(output_path, format='jpeg')

    # Verschiebe die Datei in einen anderen Ordner
    destination_folder = 'Karten'  # Passe den Zielordner-Pfad an
    shutil.move(output_path, destination_folder) 

    # Stelle die Karte dar
    plt.title('Karte von NRW')
    plt.xlabel('Längengrad')
    plt.ylabel('Breitengrad')
    plt.grid(True)
    plt.show()




import cv2
import os

#erstelle Video aus den gespeichterten Karten 

# Pfade zu den Bildern und zum Ausgabevideo
image_folder = 'Karten'
output_video_path = 'Vorhersage.mp4'

# Größe der Bilder und Framerate des Videos
frame_width, frame_height = 640, 480
fps = 1

# Erstelle das Video
out = cv2.VideoWriter(output_video_path, cv2.VideoWriter_fourcc(*'mp4v'), fps, (frame_width, frame_height))

# Liste der Dateinamen der Bilder im Ordner
image_files = sorted([f for f in os.listdir(image_folder) if f.endswith('.jpeg')])

for image_file in image_files:
    image_path = os.path.join(image_folder, image_file)
    frame = cv2.imread(image_path)
    
    if frame is not None:
        frame = cv2.resize(frame, (frame_width, frame_height))
        out.write(frame)

# Videostream und Video-Objekt schließen
out.release()
cv2.destroyAllWindows()
print('ready')
